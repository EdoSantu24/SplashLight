/* This code is sending the led status to the ttn server */

#include "LoRaWan_APP.h"

/* OTAA keys */
uint8_t devEui[] = { 0x70, 0xB3, 0xD5, 0x7E, 0xD0, 0x06, 0x53, 0xC8 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99 };
uint8_t appKey[] = { 0x74, 0xD6, 0x6E, 0x63, 0x45, 0x82, 0x48, 0x27, 0xFE, 0xC5, 0xB7, 0x70, 0xBA, 0x2B, 0x50, 0x45 };

/* ABP (solo se usi ABP invece di OTAA) */
uint8_t nwkSKey[] = { 0x15, 0xb1, 0xd0, 0xef, 0xa4, 0x63, 0xdf, 0xbe, 0x3d, 0x11, 0x18, 0x1e, 0x1e, 0xc7, 0xda,0x85 };
uint8_t appSKey[] = { 0xd7, 0x2c, 0x78, 0x75, 0x8c, 0xdc, 0xca, 0xbf, 0x55, 0xee, 0x4a, 0x77, 0x8d, 0x16, 0xef,0x67 };
uint32_t devAddr =  ( uint32_t )0x007e6ae1;

uint16_t userChannelsMask[6]={ 0x00FF,0x0000,0x0000,0x0000,0x0000,0x0000 };



/* Config LoRaWAN */
LoRaMacRegion_t loraWanRegion = ACTIVE_REGION;
DeviceClass_t loraWanClass = CLASS_A;
uint32_t appTxDutyCycle = 30000; // ogni 30s
bool overTheAirActivation = true;
bool loraWanAdr = true;
bool isTxConfirmed = true;
uint8_t appPort = 2;
uint8_t confirmedNbTrials = 4;

/* LED config */
#define LED_PIN 19
bool ledState = true; 
unsigned long lastLedToggle = 0;

/* Funzione per costruire il payload uplink */
static void prepareTxFrame(uint8_t port) {
  appDataSize = 1;
  appData[0] = ledState ? 0x01 : 0x00;
}

/* Cambia lo stato del LED ogni 60 secondi */
void checkLedAutoToggle() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastLedToggle >= 60000) {
    ledState = !ledState;
    digitalWrite(LED_PIN, ledState ? HIGH : LOW);
    lastLedToggle = currentMillis;
  }
}

/* Gestione dei messaggi ricevuti (downlink) */
void downLinkDataHandle(McpsIndication_t *mcpsIndication) {
  if (mcpsIndication->RxData == true && mcpsIndication->BufferSize > 0) {
    uint8_t command = mcpsIndication->Buffer[0];
    if (command == 0x01) {
      ledState = true;
      digitalWrite(LED_PIN, HIGH);
      Serial.println("Ricevuto comando: ACCENDI LED");
    } else if (command == 0x00) {
      ledState = false;
      digitalWrite(LED_PIN, LOW);
      Serial.println("Ricevuto comando: SPEGNI LED");
    } else {
      Serial.print("Comando sconosciuto ricevuto: ");
      Serial.println(command, HEX);
    }
  }
}

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);
  Serial.begin(115200);
  Mcu.begin(HELTEC_BOARD, SLOW_CLK_TPYE);
  lastLedToggle = millis();
}

void loop() {
  checkLedAutoToggle(); // Gestione LED locale ogni 60s

  switch (deviceState) {
    case DEVICE_STATE_INIT:
#if (LORAWAN_DEVEUI_AUTO)
      LoRaWAN.generateDeveuiByChipID();
#endif
      LoRaWAN.init(loraWanClass, loraWanRegion);
      LoRaWAN.setDefaultDR(3);
      break;

    case DEVICE_STATE_JOIN:
      LoRaWAN.join();
      break;

    case DEVICE_STATE_SEND:
      prepareTxFrame(appPort); // prepara payload
      LoRaWAN.send();          // invia messaggio uplink
      deviceState = DEVICE_STATE_CYCLE;
      break;

    case DEVICE_STATE_CYCLE:
      txDutyCycleTime = appTxDutyCycle + randr(-APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND);
      LoRaWAN.cycle(txDutyCycleTime); // programma il prossimo invio
      deviceState = DEVICE_STATE_SLEEP;
      break;

    case DEVICE_STATE_SLEEP:
      LoRaWAN.sleep(loraWanClass); // va in sleep
      break;

    default:
      deviceState = DEVICE_STATE_INIT;
      break;
  }
}
